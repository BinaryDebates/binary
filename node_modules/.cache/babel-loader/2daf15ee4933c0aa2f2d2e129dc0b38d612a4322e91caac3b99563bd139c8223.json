{"ast":null,"code":"import _regeneratorRuntime from \"/Users/daviswong/Desktop/binary/binary/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/daviswong/Desktop/binary/binary/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { gapi, gapiComplete } from './gapiScript';\n\n/**\n * Function to load gapi auth2 from a gapi that you provied\n * Check full docs here: https://developers.google.com/identity/sign-in/web/reference#auth_setup\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nvar loadAuth2 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(gapiScript, clientId, scopes) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve) {\n            gapiScript.load('auth2', function () {\n              resolve(gapiScript.auth2.init({\n                client_id: clientId,\n                scope: scopes\n              }));\n            });\n          }));\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function loadAuth2(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Function to init gapi auth2 with props\n * @param {Object} gapiScript gapi script object\n * @param {*} props Possible props to init gapi auth2, check the options on google docs: https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig\n */\nvar loadAuth2WithProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(gapiScript, props) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve) {\n            gapiScript.load('auth2', function () {\n              resolve(gapiScript.auth2.init(props));\n            });\n          }));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function loadAuth2WithProps(_x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n *\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nvar loadClientAuth2 = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(gapiScript, clientId, scopes) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", new Promise(function (resolve) {\n            gapiScript.load('client', function () {\n              resolve(gapiScript.client.init({\n                client_id: clientId,\n                scope: scopes\n              }));\n            });\n            gapiScript.load('auth2', function () {\n              resolve(gapiScript.client.init({\n                client_id: clientId,\n                scope: scopes\n              }));\n            });\n          }));\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function loadClientAuth2(_x6, _x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n * A very special function to load the gapi inside the DOM, directly.\n * So it'll load the real and most recent gapi-scrip from google and attach to DOM:\n * let gapi = loadGapiInsideDOM();\n * Now you can use it anywhere.\n */\nvar loadGapiInsideDOM = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", new Promise(function (resolve) {\n            var element = document.getElementsByTagName('script')[0];\n            var js = document.createElement('script');\n            js.id = 'google-platform';\n            js.src = '//apis.google.com/js/platform.js';\n            js.async = true;\n            js.defer = true;\n            element.parentNode.insertBefore(js, element);\n            js.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    resolve(window.gapi);\n                  case 1:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4);\n            }));\n          }));\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return function loadGapiInsideDOM() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport { gapi, gapiComplete, loadAuth2, loadAuth2WithProps, loadClientAuth2, loadGapiInsideDOM };","map":{"version":3,"names":["gapi","gapiComplete","loadAuth2","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","gapiScript","clientId","scopes","wrap","_callee$","_context","prev","next","abrupt","Promise","resolve","load","auth2","init","client_id","scope","stop","_x","_x2","_x3","apply","arguments","loadAuth2WithProps","_ref2","_callee2","props","_callee2$","_context2","_x4","_x5","loadClientAuth2","_ref3","_callee3","_callee3$","_context3","client","_x6","_x7","_x8","loadGapiInsideDOM","_ref4","_callee5","_callee5$","_context5","element","document","getElementsByTagName","js","createElement","id","src","async","defer","parentNode","insertBefore","onload","_callee4","_callee4$","_context4","window"],"sources":["/Users/daviswong/Desktop/binary/binary/node_modules/gapi-script/index.js"],"sourcesContent":["import { gapi, gapiComplete } from './gapiScript';\n\n/**\n * Function to load gapi auth2 from a gapi that you provied\n * Check full docs here: https://developers.google.com/identity/sign-in/web/reference#auth_setup\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nconst loadAuth2 = async function (gapiScript, clientId, scopes) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init({\n        client_id: clientId,\n        scope: scopes\n      }));\n    });\n  });\n}\n\n/**\n * Function to init gapi auth2 with props\n * @param {Object} gapiScript gapi script object\n * @param {*} props Possible props to init gapi auth2, check the options on google docs: https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig\n */\nconst loadAuth2WithProps = async function (gapiScript, props) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init(props));\n    });\n  });\n}\n\n/**\n *\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nconst loadClientAuth2 = async function (gapiScript, clientId, scopes) {\n  return new Promise(resolve => {\n      gapiScript.load('client', () => {\n          resolve(gapiScript.client.init({\n              client_id: clientId,\n              scope: scopes\n          }));\n      });\n      gapiScript.load('auth2', () => {\n          resolve(gapiScript.client.init({\n              client_id: clientId,\n              scope: scopes\n          }));\n      });\n  });\n}\n\n/**\n * A very special function to load the gapi inside the DOM, directly.\n * So it'll load the real and most recent gapi-scrip from google and attach to DOM:\n * let gapi = loadGapiInsideDOM();\n * Now you can use it anywhere.\n */\nconst loadGapiInsideDOM = async function () {\n  return new Promise(resolve => {\n    const element = document.getElementsByTagName('script')[0];\n    const js = document.createElement('script');\n    js.id = 'google-platform';\n    js.src = '//apis.google.com/js/platform.js';\n    js.async = true;\n    js.defer = true;\n    element.parentNode.insertBefore(js, element);\n    js.onload = async () => {\n      resolve(window.gapi);\n    }\n  });\n}\n\nexport {\n  gapi,\n  gapiComplete,\n  loadAuth2,\n  loadAuth2WithProps,\n  loadClientAuth2,\n  loadGapiInsideDOM,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}